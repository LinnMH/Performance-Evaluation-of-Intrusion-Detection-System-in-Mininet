import pandas as pd

# Read the CSV file generated by tshark
df = pd.read_csv('extracted_features.csv', names=[
    "Stream", "Src IP", "Dst IP", "Src Port", "Dst Port",
    "Packet Length", "Time Delta", "SYN Flag", "FIN Flag", "RST Flag"
])

# Define the complete feature order of the 2017 IDS dataset, including the fields we actually extracted
columns_order = [
    'Destination Port', 'Flow Duration', 'Total Fwd Packets', 'Total Backward Packets',
    'Total Length of Fwd Packets', 'Total Length of Bwd Packets', 'Fwd Packet Length Max',
    'Fwd Packet Length Min', 'Fwd Packet Length Mean', 'Fwd Packet Length Std',
    'Bwd Packet Length Max', 'Bwd Packet Length Min', 'Bwd Packet Length Mean',
    'Bwd Packet Length Std', 'Flow Bytes/s', 'Flow Packets/s', 'Flow IAT Mean',
    'Flow IAT Std', 'Flow IAT Max', 'Flow IAT Min', 'Fwd IAT Total', 'Fwd IAT Mean',
    'Fwd IAT Std', 'Fwd IAT Max', 'Fwd IAT Min', 'Bwd IAT Total', 'Bwd IAT Mean',
    'Bwd IAT Std', 'Bwd IAT Max', 'Bwd IAT Min', 'Fwd PSH Flags', 'Bwd PSH Flags',
    'Fwd URG Flags', 'Bwd URG Flags', 'Fwd Header Length_1', 'Bwd Header Length',
    'Fwd Packets/s', 'Bwd Packets/s', 'Min Packet Length', 'Max Packet Length',
    'Packet Length Mean', 'Packet Length Std', 'Packet Length Variance',
    'FIN Flag Count', 'SYN Flag Count', 'RST Flag Count', 'PSH Flag Count',
    'ACK Flag Count', 'URG Flag Count', 'CWE Flag Count', 'ECE Flag Count',
    'Down/Up Ratio', 'Average Packet Size', 'Avg Fwd Segment Size',
    'Avg Bwd Segment Size', 'Fwd Header Length', 'Fwd Avg Bytes/Bulk',
    'Fwd Avg Packets/Bulk', 'Fwd Avg Bulk Rate', 'Bwd Avg Bytes/Bulk',
    'Bwd Avg Packets/Bulk', 'Bwd Avg Bulk Rate', 'Subflow Fwd Packets',
    'Subflow Fwd Bytes', 'Subflow Bwd Packets', 'Subflow Bwd Bytes',
    'Init_Win_bytes_forward', 'Init_Win_bytes_backward', 'act_data_pkt_fwd',
    'min_seg_size_forward', 'Active Mean', 'Active Std', 'Active Max', 'Active Min',
    'Idle Mean', 'Idle Std', 'Idle Max', 'Idle Min', 'Label'
]

# Map the extracted columns to the 2017 dataset column names
df = df.rename(columns={
    "Dst Port": "Destination Port",
    "Time Delta": "Flow Duration",
    "Packet Length": "Total Length of Fwd Packets",  # Further processing is needed to differentiate direction
    "SYN Flag": "SYN Flag Count",
    "FIN Flag": "FIN Flag Count",
    "RST Flag": "RST Flag Count"
})

# Fill missing columns to match the full column order
for col in columns_order:
    if col not in df.columns:
        df[col] = None  # Fill missing columns with null values

# Rearrange column order and create a copy
df_reordered = df[columns_order].copy()

# Remove all empty columns (i.e., columns that are all NaN)
df_reordered.dropna(axis=1, how='all', inplace=True)

# Remove rows with no destination port (i.e., rows where 'Destination Port' is NaN)
df_reordered = df_reordered.dropna(subset=['Destination Port'])

# Save to a new CSV file
df_reordered.to_csv('reordered_features_no_empty_rows.csv', index=False)

print("Features reordered, empty columns and rows removed, and saved to 'reordered_features_no_empty_rows.csv'")
